name: Service CI/CD

on:
  workflow_call:
    inputs:
      gitversion_config:
        required: true
        type: string
      solution_path:
        required: true
        type: string
      unit_test_project:
        required: true
        type: string
      integration_test_project:
        required: true
        type: string
      docker_image:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      dockerfile_context_path:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  build:
    name: Build, Test and Push Docker Image
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.1.0
        with:
          useConfigFile: true
          configFilePath: ${{ inputs.gitversion_config }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.solution_path }}

      - name: Build
        run: dotnet build ${{ inputs.solution_path }} --no-restore --configuration Release

      - name: Run Unit Tests
        run: dotnet test ${{ inputs.unit_test_project }} --no-build --configuration Release --verbosity normal

      - name: Run Integration Tests
        run: dotnet test ${{ inputs.integration_test_project }} --no-build --configuration Release --verbosity normal

      - name: Build & Push Docker image
        run: |
          IMAGE_NAME=${{ inputs.docker_image }}
          IMAGE_TAG=${{ steps.gitversion.outputs.semVer }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f ${{ inputs.dockerfile_path }} ${{ inputs.dockerfile_context_path }}
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
